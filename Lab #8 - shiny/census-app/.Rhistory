load("~/Downloads/NatalRiskData.rData")
train <- sdata[sdata$ORIGRANDGROUP<=5]
train <-sdata[sdata$ORIGRANDGROUP<=5]
train <-sdata[sdata$ORIGRANDGROUP<=5,]
train <-sdata[sdata$ORIGRANDGROUP>5,]
train <-sdata[sdata$ORIGRANDGROUP<=5,]
test <-sdata[sdata$ORIGRANDGROUP>5,]
library(gdata)
install.packages("gdata")
library(gdata)
rm(d)
rm(dat)
rm(k1)
rm(k2)
rm(k3)
rm(k4)
rm(k5)
rm(k6)
rm(k7)
rm(k8)
rm(k9)
rm(k10)
rm(kmean)
rm(sdata)
rm(set)
rm(test)
rm(train)
rollingsales_manhattan <- read_csv("rollingsales_manhattan.csv")
install.packages("readr")
library(readr)
rollingsales_manhattan <- read_csv("rollingsales_manhattan.csv")
rollingsales_manhattan <- read_csv("rollingsales_manhattan.csv")
numeric_matrix_sales <- data.matrix(rollingsales_manhattan)
na.omit(rollingsales_manhattan)
numeric_matrix_sales <- data.matrix(rollingsales_manhattan)
help("na.omit")
na.omit(numeric_matrix_sales)
training <- sample(1:nrow(numeric_matrix_sales), .75 * nrow(numeric_matrix_sales), replace = FALSE)
testing <- setdiff(1:nrow(numeric_matrix_sales), training)
train <- subset(numeric_matrix_sales[traning, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
train <- subset(numeric_matrix_sales[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
View(numeric_matrix_sales)
rollingsales_manhattan <- read.csv("rollingsales_manhattan.csv")
numeric_matrix_sales <- data.matrix(rollingsales_manhattan)
na.omit(numeric_matrix_sales)
training <- sample(1:nrow(numeric_matrix_sales), .75 * nrow(numeric_matrix_sales), replace = FALSE)
testing <- setdiff(1:nrow(numeric_matrix_sales), training)
train <- subset(numeric_matrix_sales[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
test <- subset(numeric_matrix_sales[testing, ], select = c(SALE.PRICE, GORSS.SQUARE.FEET, ZIP.CODE))
test <- subset(numeric_matrix_sales[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
for(k in 1:25)\
for(k in 1:25)
print(k)
for(k in 1:25)
{}
for (k in 1:20) {print(k)predicted.labels<-knn(train, test, cl, k) num.incorrect.labels<-sum(predicted.labels!= true.labels)misclassification.rate<-num.incorrect.labels/ num.test.set.labelsprint(misclassification.rate)}
for (k in 1:20) {print(k) predicted.labels<-knn(train, test, cl, k) num.incorrect.labels<-sum(predicted.labels!= true.labels)misclassification.rate<-num.incorrect.labels/ num.test.set.labelsprint(misclassification.rate)}
library(class)
neighborhood <- numeric_matrix_sales[training,2]
true_labels <- numeric_matrix_sales[testing,2]
print(mis_rate)
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels, != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels, != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels, != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels, != true_labels)
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
train <- subset(numeric_matrix_sales[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, TOTAL.UNITS, TAX.CLASS.AT.TIME.OF.SALE))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
test <- subset(numeric_matrix_sales[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, TOTAL.UNITS, TAX.CLASS.AT.TIME.OF.SALE))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
test <- subset(numeric_matrix_sales[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, TOTAL.UNITS, TAX.CLASS.AT.TIME.OF.SALE, SALE.PRICE, SALE.DATE))
train <- subset(numeric_matrix_sales[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, TOTAL.UNITS, TAX.CLASS.AT.TIME.OF.SALE, SALE.PRICE, SALE.DATE))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k + ", " + mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k, ", ", mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(mis_rate)
print(k)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
plot(numeric_matrix_sales$SALE.PRICE~numeric_matrix_sales$GROSS.SQUARE.FEET)
help("nrow")
plot(numeric_matrix_sales[nrows(numeric_matrix_sales),]~numeric_matrix_sales[1,])
plot(numeric_matrix_sales[3,]~numeric_matrix_sales[1,])
plot(numeric_matrix_sales[,16]~numeric_matrix_sales[,20])
lm(numeric_matrix_sales[,16]~numeric_matrix_sales[,20])
model <- lm(numeric_matrix_sales[,16]~numeric_matrix_sales[,20])
abline(model)
plot(1:20, mis_rate)
plot(1*20, mis_rate)
plot(1:20, incorrect_labels)
plot(1:4559, incorrect_labels)
plot(1:20, mis_rate)
plot(1:6849, testing)
incorrect_labels
charToRaw("in terms of that")
charToRaw("œ")
charToRaw("œ§")
library(readr)
challenge <- read_csv(readr_example(challenge.csv))
challenge <- read_csv(readr_example("challenge.csv"))
problems(challenge)
rollingsales_manhattan
> rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` == "$0", NA, `SALE.PRICE`))
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` == "$0", NA, `SALE.PRICE`))
getwd()
rollingsales_manhattan <- read.csv("rollingsales_manhattan.csv")
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` == "$0", NA, `SALE.PRICE`))
library(dplyr)
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` == "$0", NA, `SALE.PRICE`))
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == "0", NA, `YEAR.BUILT`))
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == "1000", NA, `YEAR.BUILT`))
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`GROSS.SQUARE.FEET` = ifelse(`GROSS.SQUARE.FEET` == "1", NA, `GROSS.SQUARE.FEET`))
rollingsales_manhattan_clean <- rollingsales_manhattan %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` == "$0", NA, `SALE.PRICE`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == "1000", NA, `YEAR.BUILT`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == "0", NA, `YEAR.BUILT`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`GROSS.SQUARE.FEET` = ifelse(`GROSS.SQUARE.FEET` == "1", NA, `GROSS.SQUARE.FEET`))
plot(rollingsales_manhattan_clean[,16]~rollingsales_manhattan_clean[,20])
View(rollingsales_manhattan_clean)
View(rollingsales_manhattan_clean)
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`GROSS.SQUARE.FEET` = ifelse(`GROSS.SQUARE.FEET` == 1, NA, `GROSS.SQUARE.FEET`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == 0, NA, `YEAR.BUILT`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == 1000, NA, `YEAR.BUILT`))
plot(rollingsales_manhattan_clean[,16]~rollingsales_manhattan_clean[,20])
summary(rollingsales_manhattan_clean)
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`COMMERCIAL.UNITS` = ifelse(`COMMERCIAL.UNITS` == 0, NA, `COMMERCIAL.UNITS`))
library(dplyr)
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`COMMERCIAL.UNITS` = ifelse(`COMMERCIAL.UNITS` == 0, NA, `COMMERCIAL.UNITS`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`TOTAL.UNITS` = ifelse(`TOTAL.UNITS` == 0, NA, `TOTAL.UNITS`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`LAND.SQUARE.FEET` = ifelse(`LAND.SQUARE.FEET` == 0, NA, `LAND.SQUARE.FEET`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`RESIDENTIAL.UNITS` = ifelse(`RESIDENTIAL.UNITS` == 0, NA, `RESIDENTIAL.UNITS`))
plot(rollingsales_manhattan_clean[,16]~rollingsales_manhattan_clean[,20])
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` == 0, NA, `SALE.PRICE`))
plot(rollingsales_manhattan_clean[,16]~rollingsales_manhattan_clean[,20])
summary(rollingsales_manhattan_clean)
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`GROSS.SQUARE.FEET` = ifelse(`GROSS.SQUARE.FEET` <= 1, NA, `GROSS.SQUARE.FEET`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`GROSS.SQUARE.FEET` = ifelse(`GROSS.SQUARE.FEET` <= 10, NA, `GROSS.SQUARE.FEET`))
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`LAND.SQUARE.FEET` = ifelse(`LAND.SQUARE.FEET` <= 10, NA, `LAND.SQUARE.FEET`))
plot(rollingsales_manhattan_clean[,16]~rollingsales_manhattan_clean[,20])
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`SALE.PRICE` = ifelse(`SALE.PRICE` <= 10, NA, `SALE.PRICE`))
plot(rollingsales_manhattan_clean[,16]~rollingsales_manhattan_clean[,20])
abline(model)
attach(rollingsales_manhattan_clean)
model <- lm(GROSS.SQUARE.FEET~SALE.PRICE)
abline(model)
model <- lm(log(GROSS.SQUARE.FEET)~log(SALE.PRICE)
)
abline(model)
plot(log(GROSS.SQUARE.FEET)~log(SALE.PRICE)
)
model <- lm(log(GROSS.SQUARE.FEET)~log(SALE.PRICE)
)
abline(model)
training
rm(model)
model <- lm(log(YEAR.BUILT)~log(SALE.PRICE))
abline(model)
plot(log(YEAR.BUILT)~log(SALE.PRICE))
plot((YEAR.BUILT)~(SALE.PRICE))
plot(log(YEAR.BUILT)~log(SALE.PRICE))
plot((YEAR.BUILT)~log(SALE.PRICE))
abline(model)
model <- lm((YEAR.BUILT)~log(SALE.PRICE))
abline(model)
plot(log(GROSS.SQUARE.FEET)~log(SALE.PRICE))
plot((YEAR.BUILT)~(SALE.PRICE))
plot((YEAR.BUILT)~log(SALE.PRICE))
> for(k in 1:25)
+ {
+ predicted.labels <- knn(train, test, neighborhood, k)
+ incorrect_labels <- sum(predicted.labels != true_labels)
+ mis_rate <- incorrect_labels / nrow(test)
+ print(k)
+ print(mis_rate)
+ }
> for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
library(gdata)
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
library(class)
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
test <-c(train, test, neighborhood, k=1)
test <-c(train, test)
knn(trian, test, neighborhood, k=5)
knn(train, test, neighborhood, k=5)
training <- sample(1:nrow(rollingsales_manhattan_clean), .75 * nrow(rollingsales_manhattan_clean), replace = FALSE)
testing <- setdiff(1:nrow(rollingsales_manhattan_clean), training)
train <- subset(rollingsales_manhattan_clean[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
test <- subset(rollingsales_manhattan_clean[testing, ], select = c(SALE.PRICE, GORSS.SQUARE.FEET, ZIP.CODE))
test <- subset(rollingsales_manhattan_clean[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`NEIGHBORHOOD` = ifelse(`NEIGHBORHOOD` == "", NA, `NEIGHBORHOOD`))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
training <- sample(1:nrow(rollingsales_manhattan), .75 * nrow(rollingsales_manhattan), replace = FALSE)
testing <- setdiff(1:nrow(rollingsales_manhattan), training)
train <- subset(rollingsales_manhattan[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
test <- subset(rollingsales_manhattan[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k, na.rm = TRUE)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
summary(rollingsales_manhattan)
rollingsales_manhattan_clean <- rollingsales_manhattan_clean %>% mutate(`YEAR.BUILT` = ifelse(`YEAR.BUILT` == 0, NA, `YEAR.BUILT`))
summary(rollingsales_manhattan)
training <- sample(1:nrow(rollingsales_manhattan_clean), .75 * nrow(rollingsales_manhattan_clean), replace = FALSE)
testing <- setdiff(1:nrow(rollingsales_manhattan), training)
training <- sample(1:nrow(rollingsales_manhattan), .75 * nrow(rollingsales_manhattan), replace = FALSE)
testing <- setdiff(1:nrow(rollingsales_manhattan), training)
train <- subset(rollingsales_manhattan[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, LOT, YEAR.BUILT, BLOCK))
test <- subset(rollingsales_manhattan[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, LOT, YEAR.BUILT, BLOCK))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
na.omit(rollingsales_manhattan)
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
training <- sample(1:nrow(rollingsales_manhattan), .75 * nrow(rollingsales_manhattan), replace = FALSE)
testing <- setdiff(1:nrow(rollingsales_manhattan), training)
train <- subset(rollingsales_manhattan[training, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, LOT, YEAR.BUILT, BLOCK))
test <- subset(rollingsales_manhattan[testing, ], select = c(SALE.PRICE, GROSS.SQUARE.FEET, ZIP.CODE, LOT, YEAR.BUILT, BLOCK))
for(k in 1:25)
{
predicted.labels <- knn(train, test, neighborhood, k)
incorrect_labels <- sum(predicted.labels != true_labels)
mis_rate <- incorrect_labels / nrow(test)
print(k)
print(mis_rate)
}
price_yearbuilt <- na.omit(rollingsales_manhattan_clean[, c("YEAR.BUILT", "SALE.PRICE", "NEIGHBORHOOD")])
n.points <- nrow(price_yearbuilt)
training <- sample(1:n.points, 0.8*n.points, replace=FALSE)
train <- subset(price_yearbuilt[training,], select = c(`YEAR.BUILT`, `SALE.PRICE`))
testing <- setdiff(1:n.points, training)
test <- subset(price_yearbuilt[testing, ], select = c(`YEAR.BUILT`, `SALE.PRICE`))
true.labels <- price_yearbuilt$NEIGHBORHOOD[training]
test.labels.true <- price_yearbuilt$NEIGHBORHOOD[testing]
for(k in 1:20){
print(k)
predicted_labels <- knn(train, test, true.labels, k)
incorrect_count <- sum(predicted_labels != test.labels.true)
miss_rate <- incorrect_count / length(test.labels.true)
print(miss_rate)
}
library(class)
library(dplyr)
for(k in 1:20){
print(k)
predicted_labels <- knn(train, test, true.labels, k)
incorrect_count <- sum(predicted_labels != test.labels.true)
miss_rate <- incorrect_count / length(test.labels.true)
print(miss_rate)
}
for(k in 1:100){
print(k)
predicted_labels <- knn(train, test, true.labels, k)
incorrect_count <- sum(predicted_labels != test.labels.true)
miss_rate <- incorrect_count / length(test.labels.true)
print(miss_rate)
}
test1 <-c(1900, 1063,)
cl <- rollingsales_manhattan_clean$ZIP.CODE[training]
test1 <-c(1900, 1063, cl, 1)
test1 <-c(1900, 1063)
knn(train, test, cl, 1)
plot(knn(train, test, cl, 1))
summary(knn(train, test, cl, 1))
read.csv("6620_dataming/pfsense_defense_all_indicies.csv", header = TRUE, sep = ",")
read.csv("6620_datamining/pfsense_defense_all_indicies.csv", header = TRUE, sep = ",")
read.csv("6220_datamining/pfsense_defense_all_indicies.csv", header = TRUE, sep = ",")
read.csv("6220_datamining/pfsense_defense_all_indices.csv", header = TRUE, sep = ",")
defense <- read.csv("6220_datamining/pfsense_defense_all_indices.csv", header = TRUE, sep = ",")
defense
summary(defense)
attach(defense)
defense_clean <- defense[,c("X.timestamp", "dest_ip", "dest_port", "proto", "direction", "src_ip", "src_port", "host")]
summary(defense_clean)
write.csv(defen, file="6220_datamining/defense_clean.csv")
write.csv(defense_clean, file="6220_datamining/defense_clean.csv")
offense <- read.csv("6220_datamining/pfsense_offense_all_indices.csv", header = TRUE, sep = ",")
attach(offense)
detach(defense)
attach(offense)
detach(offense)
attach(offense)
offense_clean <- offense[,c("X.timestamp", "dest_ip", "dest_port", "proto", "direction", "src_ip", "src_port", "host")]
summary(offense_clean)
clear
write.csv(offense_clean, file="6220_datamining/offense_clean.csv")
clear
summary(offense_clean)
offense_clean <- offense[,c("X.timestamp", "dest_ip", "dest_port", "proto", "direction", "src_ip", "src_port", "host", "action")]
defense_clean <- defense[,c("X.timestamp", "dest_ip", "dest_port", "proto", "direction", "src_ip", "src_port", "host", "action", "ID")]
defense_clean <- defense[,c("X.timestamp", "dest_ip", "dest_port", "proto", "direction", "src_ip", "src_port", "host", "action", "id")]
offense_clean <- offense[,c("X.timestamp", "dest_ip", "dest_port", "proto", "direction", "src_ip", "src_port", "host", "action", "id")]
write.csv(offense_clean, file="6220_datamining/offense_clean.csv")
write.csv(defense_clean, file="6220_datamining/defense_clean.csv")
View(numeric_matrix_sales)
View(offense_clean)
library(tidyverse)
library("tidyverse")
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyr)
library(readr)
locale(decimal_mark = ",", grouping_mark = ",")
locale(decimal_mark = ",")
group_mark
locale(grouping_mark = ".")
help("locale")
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
help("spread")
spread(stocks, fill = NA)
spread(stocks, key = qtr, value = return, fill = NA)
help("gather")
spread(stocks, key = qtr, value = return, fill = NA) %>% gather(stocks, key = qtr, value = return)
spread(stocks, key = qtr, value = return, fill = NA) %>% gather(stocks, key = qtr, value = return, na.rm = TRUE)
rlang::last_error()
spread(stocks, key = qtr, value = return, fill = NA)
spread(stocks, key = qtr, value = return, fill = NA) %>% gather( key = qtr, value = return, na.rm = TRUE)
help("complete")
stocks %>% complete(year, qtr)
complete(stocks, year, qtr)
help("spread")
spread(stocks, key = qtr, value = return, fill = NA)
aws <- read.csv("~/NCL/aws_vpc_flow.log", header = true_labels)
aws <- read.csv("~/NCL/aws_vpc_flow.log", header = true)
aws <- read.csv("~/NCL/aws_vpc_flow.log", sep = " ", header = TRUE)
summary aws
summary(aws)
setwd("~/Documents/Notes/3220_spring_2020/Lab #8 - shiny/census-app")
library(maps)
library(mapproj)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
percent_map( counties$white, "red", "% white")
source("helpers.R")
shinyServer(
function(input, output) {
output$map <- renderPlot({
percent_map( counties$white, "red", "% white")
})
}
)
runApp
#}
#
#}
#)
#}
#)
)
source("helpers.R")
View(percent_map)
View(percent_map)
source("helpers.R")
source("helpers.R")
counties <- readRDS("data/counties.rds")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
hlep(sliderInput())
help(sliderInput
)
